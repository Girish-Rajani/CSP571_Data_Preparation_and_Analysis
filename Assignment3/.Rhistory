#Problem 3
install.packages("readxl")
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe
concrete_data <- read_excel("D:\\Users\\HP\\Downloads\\Concrete_Data.xls")
concrete_data <- read_excel("D:\\Users\\HP\\Downloads\\Concrete_Data.xls")
concrete_data <- read_excel("D:\\Users\\HP\\Downloads\\Concrete_Data.xls")
concrete_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(concrete_data)= c("c1","c2","c3","c4","c5","c6","c7","c8","CCS")
summary(concrete_data)
concrete_data = concrete_data[c("c1","c2","c3","c4","c5","c6", "CCS")]
summary(concrete_data)
corrplot(cor(data3), method="number")
corrplot(cor(concrete_data), method="number")
corrplot(cor(concrete_data), method="number")
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
corrplot(cor(concrete_data), method="number")
GAM1 <- gam(CCS ~ c1+c2+c3+c4+c5+c6, data=concrete_data)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
GAM1 <- gam(CCS ~ c1+c2+c3+c4+c5+c6, data=concrete_data)
summary(GAM1)
GAM2 <- gam(CCS ~ s(c1)+s(c2)+s(c3)+s(c4)+s(c5)+s(c6) , data=concrete_data)
summary(GAM2)
GAM1.sse <- sum(fitted(GAM1) - data3$CCS)ˆ2
GAM1.sse <- sum(fitted(GAM1) - concrete_data$CCS)ˆ2
GAM1.sse <- sum(fitted(GAM1) - data3$CCS)^2
GAM1.sse <- sum(fitted(GAM1) - concrete_data$CCS)^2
GAM1.ssr <- sum(fitted(GAM1) - mean(data3$CCS))^2
GAM1.sse <- sum(fitted(GAM1) - concrete_data$CCS)^2
GAM1.ssr <- sum(fitted(GAM1) - mean(concrete_data$CCS))^2
GAM1.sst = GAM1.sse + GAM1.ssr
cat("R-square value of GAM without smoothing:", 1 - (GAM1.sse/GAM1.sst))
GAM2.sse <- sum(fitted(GAM2) - concrete_data$CCS)^2
GAM2.ssr <- sum(fitted(GAM2) - mean(concrete_data$CCS))^2
GAM2.sst = GAM2.sse + GAM2.ssr
cat("R-square value of GAM with smoothing:", 1 - (GAM1.sse/GAM1.sst))
anova.gam(GAM1, GAM2, test = "Chisq")
visreg(GAM1,'c1')
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
install.packages(visreg)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
install.packages(visreg)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
install.packages("visreg")
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
visreg(GAM1,'c1')
visreg(GAM2,'c1')
visreg(GAM1,'c2')
visreg(GAM2,'c2')
visreg(GAM1,'c3')
visreg(GAM2,'c3')
visreg(GAM1,'c4')
visreg(GAM2,'c4')
visreg(GAM1,'c5')
visreg(GAM2,'c5')
visreg(GAM1,'c6')
visreg(GAM2,'c6')
```{r}
```{r}
#Question 3
library("readxl")
library(corrplot)
library(mgcv)
library(visreg)
concrete_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(concrete_data)= c("c1","c2","c3","c4","c5","c6","c7","c8","CCS")
summary(concrete_data)
concrete_data = concrete_data[c("c1","c2","c3","c4","c5","c6", "CCS")]
summary(concrete_data)
corrplot(cor(concrete_data), method="number")
GAM1 <- gam(CCS ~ c1+c2+c3+c4+c5+c6, data=concrete_data)
summary(GAM1)
GAM2 <- gam(CCS ~ s(c1)+s(c2)+s(c3)+s(c4)+s(c5)+s(c6) , data=concrete_data)
summary(GAM2)
GAM1.sse <- sum(fitted(GAM1) - concrete_data$CCS)^2
GAM1.ssr <- sum(fitted(GAM1) - mean(concrete_data$CCS))^2
GAM1.sst = GAM1.sse + GAM1.ssr
cat("R-square value of GAM without smoothing:", 1 - (GAM1.sse/GAM1.sst))
GAM2.sse <- sum(fitted(GAM2) - concrete_data$CCS)^2
GAM2.ssr <- sum(fitted(GAM2) - mean(concrete_data$CCS))^2
GAM2.sst = GAM2.sse + GAM2.ssr
cat("R-square value of GAM with smoothing:", 1 - (GAM1.sse/GAM1.sst))
anova.gam(GAM1, GAM2, test = "Chisq")
visreg(GAM1,'c1')
visreg(GAM2,'c1')
visreg(GAM1,'c2')
visreg(GAM2,'c2')
visreg(GAM1,'c3')
visreg(GAM2,'c3')
visreg(GAM1,'c4')
visreg(GAM2,'c4')
visreg(GAM1,'c5')
visreg(GAM2,'c5')
visreg(GAM1,'c6')
visreg(GAM2,'c6')
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe using readxl package
CCS_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(CCS_data) <- c("C1","C2","C3","C4","C5","C6","C7","C8","CCS")
summary(CCS_data)
head(CCS_data)
CCS_data = CCS_data[c("C1","C2","C3","C4","C5","C6", "CCS")]
summary(CCS_data)
head(CCS_data)
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe using readxl package
CCS_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(CCS_data) <- c("C1","C2","C3","C4","C5","C6","C7","C8","CCS")
summary(CCS_data)
head(CCS_data)
#Remove input components C7 and C8 as only C1-C6 is required for this problem
CCS_data <- subset(CCS_data, select = -c("C7","C8"))
#Remove input components C7 and C8 as only C1-C6 is required for this problem
CCS_data <- subset(CCS_data, select = -c(C7,C8))
#CCS_data = CCS_data[c("C1","C2","C3","C4","C5","C6", "CCS")]
summary(CCS_data)
head(CCS_data)
GAM1 <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM1)
GAM1 <- gam(CCS ~ ., data=CCS_data)
GAM1 <- gam(CCS ~., data=CCS_data)
GAM1 <- gam(CCS ~., CCS_data)
GAM1 <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM1)
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe using readxl package
CCS_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(CCS_data) <- c("C1","C2","C3","C4","C5","C6","C7","C8","CCS")
summary(CCS_data)
head(CCS_data)
GAM1 <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM1)
GAM1 <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM1)
summary(CCS_data)
GAM1 <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM1)
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe using readxl package
CCS_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(CCS_data) <- c("C1","C2","C3","C4","C5","C6","C7","C8","CCS")
summary(CCS_data)
head(CCS_data)
#Using gam function to predict the CCS as a non-linear function of the input features C1-C6
GAM_non_linear <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM_non_linear)
#Creating a GAM with linear terms as well as smoothed terms
GAM_linear <- gam(CCS ~ s(C1)+s(C2)+s(C3)+s(C4)+s(C5)+s(C6), data=CCS_data)
summary(GAM_linear)
GAM1.sse <- sum(fitted(GAM1) - concrete_data$CCS)^2
GAM1.ssr <- sum(fitted(GAM1) - mean(concrete_data$CCS))^2
GAM1.sst = GAM1.sse + GAM1.ssr
cat("R-square value of GAM without smoothing:", 1 - (GAM1.sse/GAM1.sst))
GAM2.sse <- sum(fitted(GAM2) - concrete_data$CCS)^2
GAM2.ssr <- sum(fitted(GAM2) - mean(concrete_data$CCS))^2
GAM2.sst = GAM2.sse + GAM2.ssr
cat("R-square value of GAM with smoothing:", 1 - (GAM1.sse/GAM1.sst))
GAM_non_linear.sse <- sum(fitted(GAM_non_linear) - CCS_data$CCS)^2
GAM_non_linear.ssr <- sum(fitted(GAM_non_linear) - mean(CCS_data$CCS))^2
GAM_non_linear.sst = GAM_non_linear.sse + GAM_non_linear.ssr
cat("R-square value of GAM without smoothing:", 1 - (GAM_non_linear.sse/GAM_non_linear.sst))
GAM_linear.sse <- sum(fitted(GAM_linear) - CCS_data$CCS)^2
GAM_linear.ssr <- sum(fitted(GAM_linear) - mean(CCS_data$CCS))^2
GAM_linear.sst = GAM_linear.sse + GAM_linear.ssr
cat("R-square value of GAM with smoothing:", 1 - (GAM_linear.sse/GAM_linear.sst))
anova.gam(GAM_non_linear, GAM_linear, test = "Chisq")
visreg(GAM_non_linear,'c1')
visreg(GAM_non_linear,'C1')
visreg(GAM_linear,'C1')
visreg(GAM_non_linear,'C2')
visreg(GAM_linear,'C2')
visreg(GAM_non_linear,'C3')
visreg(GAM_non_linear,'C1')
#Import necessary libraries
data("mtcars")
data("swiss")
library(glmnet)
library("readxl")
library(mgcv)
library(visreg)
#Problem 1
#Load mtcars sample dataset into dataframe
mtcars <- data.frame(mtcars)
set.seed(10)
#Use 80% of dataset as training set and remaining 20% as testing set
sample <- sample(c(rep(0, 0.8 * nrow(mtcars)), rep(1, 0.2 * nrow(mtcars))))
train  <- mtcars[sample == 0, ]
test   <- mtcars[sample == 1, ]
summary(mtcars)
head(mtcars)
cat("Dimensions of training data: ", dim(train))
cat("\nDimensions of testing data: ", dim(test))
#fit a linear model using mpg as target response
lm <- lm(mpg ~ ., data=train)
summary (lm)
#What are the associated coefficient values for relevant features?
lm$coefficients
#The out-of-sample test set performance (using predict) on the regular linear model:
y_hat <- predict(lm, test, type = "response")
y <- test[ , "mpg"]
MSE <- mean((y_hat - y)^2)
cat("OOS MSE on testing data: ", MSE)
#Perform a ridge regression using glmnet
#pass x matrix and y vector:
x <- model.matrix(mpg ~ ., data=train )[, -1]
y <- train$mpg
#Perform ridge regression using 100 values of lambda for tuning
grid <- 10^seq(10, -2, length = 100)
ridge.mod <- cv.glmnet(x, y, alpha = 0, lambda = grid, parallel=TRUE)
min_lambda <- ridge.mod$lambda.min
cat("Minimum value of Lambda: ", min_lambda)
#Plot training MSE as a function of log Lambda
plot(ridge.mod)
# Fitting Ridge Regression with optimal lambda
ridge.mod2 = glmnet(x, y, alpha = 0, lambda = min_lambda)
coef(ridge.mod2)
#pass x matrix on testing
x_test = model.matrix(mpg~. ,test)[,-1]
# Predict out-of-sample test set performance
y_hat_test = predict(ridge.mod2, s = min_lambda, newx = x_test)
y_test = test[, "mpg"]
test_MSE <- mean((y_hat_test - y_test)^2)
cat("Out-of-Sample test set performance MSE: ", test_MSE)
#Problem 2
#Load swiss sample dataset into dataframe
swiss <- data.frame(swiss)
set.seed(123)
#Use 80% of dataset as training set and remaining 20% as testing set
sample <- sample(c(rep(0, 0.8 * nrow(swiss)), rep(1, 0.2 * nrow(swiss))))
train  <- swiss[sample == 0, ]
test   <- swiss[sample == 1, ]
summary(swiss)
head(swiss)
cat("Dimensions of training data: ", dim(train))
cat("\nDimensions of testing data: ", dim(test))
#fit a linear model using Fertility as target response
lm <- lm(Fertility ~ ., data=train)
summary (lm)
#What are the associated coefficient values for relevant features?
lm$coefficients
#The out-of-sample test set performance (using predict) on the regular linear model:
y_hat <- predict(lm, test, type = "response")
y <- test[ , "Fertility"]
MSE <- mean((y_hat - y)^2)
cat("OOS MSE on testing data: ", MSE)
#Perform a lasso regression using glmnet
#pass x matrix and y vector:
x <- model.matrix(Fertility ~ ., data=train )[, -1]
y <- train$Fertility
#Perform lasso regression using 100 values of lambda for tuning
grid <- 10^seq(10, -2, length = 100)
lasso.mod <- cv.glmnet(x, y, alpha = 1, lambda = grid, parallel=TRUE)
min_lambda <- lasso.mod$lambda.min
cat("Minimum value of Lambda: ", min_lambda)
#Plot training MSE as a function of log Lambda
plot(lasso.mod)
# Fitting Lasso Regression with optimal lambda
lasso.mod2 = glmnet(x, y, alpha = 1, lambda = min_lambda)
coef(lasso.mod2)
#pass x matrix on testing
x_test = model.matrix(Fertility~. ,test)[,-1]
# Predict out-of-sample test set performance
y_hat_test = predict(lasso.mod2, s = min_lambda, newx = x_test)
y_test = test[, "Fertility"]
test_MSE <- mean((y_hat_test - y_test)^2)
cat("Out-of-Sample test set performance MSE: ", test_MSE)
#Problem 3
#Load Concrete Compressive Strength sample dataset from UCI Repository into dataframe using readxl package
CCS_data <- read_excel("D:\\Users\\giris\\Downloads\\Concrete_Data.xls")
colnames(CCS_data) <- c("C1","C2","C3","C4","C5","C6","C7","C8","CCS")
summary(CCS_data)
head(CCS_data)
#Using gam function to predict the CCS as a non-linear function of the input features C1-C6
GAM_non_linear <- gam(CCS ~ C1+C2+C3+C4+C5+C6, data=CCS_data)
summary(GAM_non_linear)
#Creating a GAM with linear terms as well as smoothed terms
GAM_linear <- gam(CCS ~ s(C1)+s(C2)+s(C3)+s(C4)+s(C5)+s(C6), data=CCS_data)
summary(GAM_linear)
GAM_non_linear.sse <- sum(fitted(GAM_non_linear) - CCS_data$CCS)^2
GAM_non_linear.ssr <- sum(fitted(GAM_non_linear) - mean(CCS_data$CCS))^2
GAM_non_linear.sst = GAM_non_linear.sse + GAM_non_linear.ssr
cat("R-square value of GAM without smoothing:", 1 - (GAM_non_linear.sse/GAM_non_linear.sst))
GAM_linear.sse <- sum(fitted(GAM_linear) - CCS_data$CCS)^2
GAM_linear.ssr <- sum(fitted(GAM_linear) - mean(CCS_data$CCS))^2
GAM_linear.sst = GAM_linear.sse + GAM_linear.ssr
cat("R-square value of GAM with smoothing:", 1 - (GAM_linear.sse/GAM_linear.sst))
visreg(GAM_non_linear,'C1')
visreg(GAM_linear,'C1')
visreg(GAM_non_linear,'C2')
visreg(GAM_linear,'C2')
visreg(GAM_non_linear,'C3')
visreg(GAM_linear,'C3')
visreg(GAM_non_linear,'C4')
visreg(GAM_linear,'C4')
visreg(GAM_non_linear,'C5')
visreg(GAM_linear,'C5')
visreg(GAM_non_linear,'C6')
visreg(GAM_linear,'C6')
#Compute R^2 value for initial non linear model
GAM_non_linear.sse <- sum(fitted(GAM_non_linear) - CCS_data$CCS)^2
GAM_non_linear.ssr <- sum(fitted(GAM_non_linear) - mean(CCS_data$CCS))^2
GAM_non_linear.sst <- GAM_non_linear.sse + GAM_non_linear.ssr
GAM_non_linear.r2 <- 1 - (GAM_non_linear.sse/GAM_non_linear.sst)
cat("R-square value of initial GAM non linear model:", GAM_non_linear.r2)
#Compute R^2 value for the linear model with smoothing
GAM_linear.sse <- sum(fitted(GAM_linear) - CCS_data$CCS)^2
GAM_linear.ssr <- sum(fitted(GAM_linear) - mean(CCS_data$CCS))^2
GAM_linear.sst <- GAM_linear.sse + GAM_linear.ssr
GAM_linear.r2 <- 1 - (GAM_linear.sse/GAM_linear.sst)
cat("R-square value of GAM with smoothing:", GAM_linear.r2)
